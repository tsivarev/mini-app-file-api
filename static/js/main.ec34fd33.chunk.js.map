{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","copyToClipboard","bind","assertThisInitialized","xhr","XMLHttpRequest","open","process","responseType","onload","imageUrl","window","URL","webkitURL","createObjectURL","response","setState","send","text","textarea","result","document","createElement","setAttribute","style","position","value","body","appendChild","focus","select","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","setSelectionRange","length","execCommand","err","console","error","removeChild","isMac","navigator","platform","toUpperCase","indexOf","prompt","concat","_this2","react_default","a","vkui","id","activePanel","description","multiline","before","src","size","bottomContent","onClick","React","Component","connect","ReactDOM","render","src_App","getElementById"],"mappings":"0NA6FeA,sBAxFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,IAAK,IAGPR,EAAKS,gBAAkBT,EAAKS,gBAAgBC,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPNA,mFAWjB,IAAIY,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOC,+BAChBH,EAAII,aAAe,OACnBJ,EAAIK,OAAS,WACX,IACIC,GADaC,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBV,EAAIW,UAC9CpB,KAAKqB,SAAS,CAAChB,IAAKU,KACpBR,KAAKP,MACPS,EAAIa,KAAK,8CAGKC,GACd,IAAIC,EACAC,EAEJ,KACED,EAAWE,SAASC,cAAc,aACzBC,aAAa,YAAY,GAClCJ,EAASI,aAAa,mBAAmB,GACzCJ,EAASK,MAAMC,SAAW,QAC1BN,EAASO,MAAQR,EAEjBG,SAASM,KAAKC,YAAYT,GAE1BA,EAASU,QACTV,EAASW,SAET,IAAMC,EAAQV,SAASW,cACvBD,EAAME,mBAAmBd,GAEzB,IAAMe,EAAMvB,OAAOwB,eACnBD,EAAIE,kBACJF,EAAIG,SAASN,GAEbZ,EAASmB,kBAAkB,EAAGnB,EAASO,MAAMa,QAC7CnB,EAASC,SAASmB,YAAY,QAC9B,MAAOC,GACPC,QAAQC,MAAMF,GACdrB,EAAS,KAvBX,QAyBEC,SAASM,KAAKiB,YAAYzB,GAI5B,IAAKC,EAAQ,CACX,IAAMyB,EAAQC,UAAUC,SAASC,cAAcC,QAAQ,QAAU,EAGjE,KADA7B,EAAS8B,OAAM,SAAAC,OADIN,EAAQ,UAAO,UACK3B,IAErC,OAAO,EAGX,OAAO,mCAGA,IAAAkC,EAAAzD,KACP,OACE0D,EAAAC,EAAAhC,cAACiC,EAAA,KAAD,CAAMC,GAAG,OAAOC,YAAY,aAC1BJ,EAAAC,EAAAhC,cAACiC,EAAA,MAAD,CAAOC,GAAG,aACRH,EAAAC,EAAAhC,cAACiC,EAAA,YAAD,gBACAF,EAAAC,EAAAhC,cAACiC,EAAA,MAAD,KACEF,EAAAC,EAAAhC,cAACiC,EAAA,KAAD,CACEG,YAAY,OACnBC,WAAW,EACJC,OAAQP,EAAAC,EAAAhC,cAACiC,EAAA,OAAD,CAAQM,IAAKlE,KAAKI,MAAMC,IAAK8D,KAAM,KAC3CC,cAAeV,EAAAC,EAAAhC,cAACiC,EAAA,OAAD,CAAQS,QAAS,WAAOZ,EAAKnD,gBAAgBmD,EAAKrD,MAAMC,OAAxD,sEACf8D,KAAK,KAEJnE,KAAKI,MAAMC,eAhFRiE,IAAMC,YCIxBC,IAAQlD,KAAK,eAAgB,IAE7BmD,IAASC,OAAOhB,EAAAC,EAAAhC,cAACgD,EAAD,MAASjD,SAASkD,eAAe","file":"static/js/main.ec34fd33.chunk.js","sourcesContent":["import React from 'react';\nimport {Avatar, Button, Cell, Group, Panel, PanelHeader, View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      url: ''\n    };\n\n    this.copyToClipboard = this.copyToClipboard.bind(this);\n  }\n\n  componentDidMount() {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", process.env.PUBLIC_URL + \"/logo.jpg\");\n    xhr.responseType = \"blob\";\n    xhr.onload = function() {\n      let urlCreator = window.URL || window.webkitURL;\n      let imageUrl = urlCreator.createObjectURL(xhr.response);\n      this.setState({url: imageUrl});\n    }.bind(this);\n    xhr.send(null);\n  }\n\n  copyToClipboard(text) {\n    let textarea;\n    let result;\n\n    try {\n      textarea = document.createElement('textarea');\n      textarea.setAttribute('readonly', true);\n      textarea.setAttribute('contenteditable', true);\n      textarea.style.position = 'fixed'; // prevent scroll from jumping to the bottom when focus is set.\n      textarea.value = text;\n\n      document.body.appendChild(textarea);\n\n      textarea.focus();\n      textarea.select();\n\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n\n      textarea.setSelectionRange(0, textarea.value.length);\n      result = document.execCommand('copy');\n    } catch (err) {\n      console.error(err);\n      result = null;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n\n    // manual copy fallback using prompt\n    if (!result) {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n      result = prompt(`Press ${copyHotkey}`, text); // eslint-disable-line no-alert\n      if (!result) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  render() {\n    return (\n      <View id='main' activePanel='mainPanel'>\n        <Panel id='mainPanel'>\n          <PanelHeader>Example</PanelHeader>\n          <Group>\n            <Cell\n              description=\"BLOB\"\n\t\t\t\t\t\t\tmultiline={true}\n              before={<Avatar src={this.state.url} size={80}/>}\n              bottomContent={<Button onClick={() => {this.copyToClipboard(this.state.url)}}>Скопировать</Button>}\n              size=\"l\"\n            >\n              {this.state.url}\n            </Cell>\n          </Group>\n        </Panel>\n      </View>\n    );\n  }\n}\n\nexport default App;\n","import 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport App from './App';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit', {});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}